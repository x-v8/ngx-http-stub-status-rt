diff -urN openresty-1.11.2.2/bundle/nginx-1.11.2/src/event/ngx_event.c openresty-1.11.2.2-ngx-http-stub-status-rt/bundle/nginx-1.11.2/src/event/ngx_event.c
--- openresty-1.11.2.2/bundle/nginx-1.11.2/src/event/ngx_event.c	2016-07-18 10:19:50.000000000 +0800
+++ openresty-1.11.2.2-ngx-http-stub-status-rt/bundle/nginx-1.11.2/src/event/ngx_event.c	2016-11-23 13:25:27.000000000 +0800
@@ -73,6 +73,8 @@
 ngx_atomic_t  *ngx_stat_writing = &ngx_stat_writing0;
 ngx_atomic_t   ngx_stat_waiting0;
 ngx_atomic_t  *ngx_stat_waiting = &ngx_stat_waiting0;
+ngx_atomic_t   ngx_stat_request_time0;
+ngx_atomic_t  *ngx_stat_request_time = &ngx_stat_request_time0;
 
 #endif
 
@@ -495,7 +497,9 @@
            + cl          /* ngx_stat_active */
            + cl          /* ngx_stat_reading */
            + cl          /* ngx_stat_writing */
-           + cl;         /* ngx_stat_waiting */
+           + cl          /* ngx_stat_waiting */
+           + cl          /* ngx_stat_waiting */
+           + cl;         /* ngx_stat_request_time */
 
 #endif
 
@@ -543,6 +547,7 @@
     ngx_stat_reading = (ngx_atomic_t *) (shared + 7 * cl);
     ngx_stat_writing = (ngx_atomic_t *) (shared + 8 * cl);
     ngx_stat_waiting = (ngx_atomic_t *) (shared + 9 * cl);
+    ngx_stat_request_time = (ngx_atomic_t *) (ngx_atomic_t *) (shared + 10 * cl);
 
 #endif
 
diff -urN openresty-1.11.2.2/bundle/nginx-1.11.2/src/event/ngx_event.h openresty-1.11.2.2-ngx-http-stub-status-rt/bundle/nginx-1.11.2/src/event/ngx_event.h
--- openresty-1.11.2.2/bundle/nginx-1.11.2/src/event/ngx_event.h	2016-07-18 10:19:50.000000000 +0800
+++ openresty-1.11.2.2-ngx-http-stub-status-rt/bundle/nginx-1.11.2/src/event/ngx_event.h	2016-11-23 13:25:52.000000000 +0800
@@ -475,6 +475,7 @@
 extern ngx_atomic_t  *ngx_stat_reading;
 extern ngx_atomic_t  *ngx_stat_writing;
 extern ngx_atomic_t  *ngx_stat_waiting;
+extern ngx_atomic_t  *ngx_stat_request_time;
 
 #endif
 
diff -urN openresty-1.11.2.2/bundle/nginx-1.11.2/src/http/modules/ngx_http_stub_status_module.c openresty-1.11.2.2-ngx-http-stub-status-rt/bundle/nginx-1.11.2/src/http/modules/ngx_http_stub_status_module.c
--- openresty-1.11.2.2/bundle/nginx-1.11.2/src/http/modules/ngx_http_stub_status_module.c	2016-07-18 10:19:50.000000000 +0800
+++ openresty-1.11.2.2-ngx-http-stub-status-rt/bundle/nginx-1.11.2/src/http/modules/ngx_http_stub_status_module.c	2016-11-23 13:29:44.000000000 +0800
@@ -16,6 +16,7 @@
 static ngx_int_t ngx_http_stub_status_add_variables(ngx_conf_t *cf);
 static char *ngx_http_set_stub_status(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
+static ngx_int_t ngx_http_stub_status_init(ngx_conf_t *cf);
 
 
 static ngx_command_t  ngx_http_status_commands[] = {
@@ -33,7 +34,7 @@
 
 static ngx_http_module_t  ngx_http_stub_status_module_ctx = {
     ngx_http_stub_status_add_variables,    /* preconfiguration */
-    NULL,                                  /* postconfiguration */
+    ngx_http_stub_status_init,             /* postconfiguration */
 
     NULL,                                  /* create main configuration */
     NULL,                                  /* init main configuration */
@@ -87,7 +88,7 @@
     ngx_int_t          rc;
     ngx_buf_t         *b;
     ngx_chain_t        out;
-    ngx_atomic_int_t   ap, hn, ac, rq, rd, wr, wa;
+    ngx_atomic_int_t   ap, hn, ac, rq, rd, wr, wa, rt;
 
     if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD))) {
         return NGX_HTTP_NOT_ALLOWED;
@@ -133,13 +134,15 @@
     rd = *ngx_stat_reading;
     wr = *ngx_stat_writing;
     wa = *ngx_stat_waiting;
+    rt = *ngx_stat_request_time;
 
     b->last = ngx_sprintf(b->last, "Active connections: %uA \n", ac);
 
-    b->last = ngx_cpymem(b->last, "server accepts handled requests\n",
-                         sizeof("server accepts handled requests\n") - 1);
+    b->last = ngx_cpymem(b->last,
+                        "server accepts handled requests request_time\n",
+                        sizeof("server accepts handled requests request_time\n") - 1);
 
-    b->last = ngx_sprintf(b->last, " %uA %uA %uA \n", ap, hn, rq);
+    b->last = ngx_sprintf(b->last, " %uA %uA %uA %uA\n", ap, hn, rq, rt);
 
     b->last = ngx_sprintf(b->last, "Reading: %uA Writing: %uA Waiting: %uA \n",
                           rd, wr, wa);
@@ -234,3 +237,49 @@
 
     return NGX_CONF_OK;
 }
+
+
+static ngx_int_t
+ngx_http_status_log_handler(ngx_http_request_t *r)
+{
+    ngx_msec_int_t             ms;
+    struct timeval             tv;
+    ngx_http_core_loc_conf_t  *clcf;
+
+    if (r != r->main) {
+        return NGX_OK;
+    }
+
+    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
+    ngx_gettimeofday(&tv);
+
+    ms = (ngx_msec_int_t) ((tv.tv_sec - r->start_sec) * 1000
+        + (tv.tv_usec / 1000 - r->start_msec));
+
+    ms = ngx_max(ms, 0);
+    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
+                   "http status: request_time %M", ms);
+
+    (void) ngx_atomic_fetch_add(ngx_stat_request_time, ms);
+
+    return NGX_OK;
+}
+
+
+static ngx_int_t
+ngx_http_stub_status_init(ngx_conf_t *cf)
+{
+    ngx_http_handler_pt        *h;
+    ngx_http_core_main_conf_t  *cmcf;
+
+    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);
+
+    h = ngx_array_push(&cmcf->phases[NGX_HTTP_LOG_PHASE].handlers);
+    if (h == NULL) {
+        return NGX_ERROR;
+    }
+
+    *h = ngx_http_status_log_handler;
+
+    return NGX_OK;
+}
